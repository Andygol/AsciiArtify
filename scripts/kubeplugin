#!/bin/bash

# Check if required arguments are provided
if [ "$#" -lt 2 ]; then
  echo "Usage: $0 <resource> <namespace> [csv|json]"
  exit 1
fi

RESOURCE_TYPE=$1
NAMESPACE=$2
OUTPUT_FORMAT=${3:-csv}

# Function to output in CSV format
output_csv() {
  echo "Resource, Namespace, Name, CPU, Memory"
  kubectl top $RESOURCE_TYPE -n $NAMESPACE | tail -n +2 | while read -r line
  do
    NAME=$(echo $line | awk '{print $1}')
    CPU=$(echo $line | awk '{print $2}')
    MEMORY=$(echo $line | awk '{print $3}')
    echo "$RESOURCE_TYPE, $NAMESPACE, $NAME, $CPU, $MEMORY"
  done
}

# Function to output in JSON format
output_json() {
  echo "["
  kubectl top $RESOURCE_TYPE -n $NAMESPACE | tail -n +2 | while read -r line
  do
    NAME=$(echo $line | awk '{print $1}')
    CPU=$(echo $line | awk '{print $2}')
    MEMORY=$(echo $line | awk '{print $3}')
    echo "  {\"Resource\": \"$RESOURCE_TYPE\", \"Namespace\": \"$NAMESPACE\", \"Name\": \"$NAME\", \"CPU\": \"$CPU\", \"Memory\": \"$MEMORY\"},"
  done | sed '$s/,$//'
  echo "]"
}

# Choose the output format
case $OUTPUT_FORMAT in
  csv)
    output_csv
    ;;
  json)
    output_json
    ;;
  *)
    echo "Invalid output format. Please use 'csv' or 'json'."
    exit 1
    ;;
esac
